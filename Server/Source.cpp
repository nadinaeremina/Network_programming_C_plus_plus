#include <iostream>
#include <string>
#include <WinSock2.h>
#include <WS2tcpip.h>
#pragma comment(lib, "Ws2_32.lib")

using namespace std;

void main()
{
	// максим возможная длина строки 
	const int MAXSTRLEN = 255;

	// инф-цию об инициализации сокетов нужно где-то хранить - поэтому создаем стр-ру
	WSADATA wsaData;

	// здесь будет храниться дискриптор нашего сокета
	SOCKET dsock;

	// дискриптор accept socket // дискриптор клиента
	SOCKET daccsock;

	// для хранения локального адреса и порта инициализации сокета
	sockaddr_in addr;

	// сообщаем инф-цию о windows-socket, который мы исп-ем
	WSAStartup(MAKEWORD(2, 2), &wsaData);
	// если мы передаем указатель - скорре всего мы не передаем в ф-цию данные, которые нужны будут
	// а мы передаем в нее стр-ру, в которую у нас ф-ция положит эти данные

	// получаем дискриптор сокета сервера
	dsock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	// тип создаваемого сокета 'Sream' - TCP

	// настраиваем адрес
	addr.sin_family = AF_INET;
	inet_pton(AF_INET, "0.0.0.0", &addr.sin_addr); // из адреса достаем его sin_addr
	// в sin_addr  будет помещен некий ip-адрес 
	// sin_addr относится к семейству in_addr - соот-но туда будет помещен именно этот тип данных - in_addr
	// ip хранится не ввиде строки - а в опред типе данных, который будет туда помещен

	// адресу назначаем sin_port
	addr.sin_port = htons(20000);

	// запускаем сервер

	// 1) биндим сокет
	bind(dsock, (SOCKADDR*)&addr, sizeof(addr));
	// 'SOCKADDR' - преобразовываем на 'указатель SOCKADDR'

	// 2) начинаем прослушивать сокет
	listen(dsock, 1);

	cout << "Server is started...\n";
	// это важно сделать - тк дальше идет команда 'accept', а она яв-ся блокирующей - соот-но встанет пр-ма
	// и зависнет, пока не поключится клиент

	// получаем сокет клиента
	daccsock = accept(dsock, nullptr, nullptr);
	// 'accept' выполнится и мы пойдем дальше

	// создаем буфер
	char buf[MAXSTRLEN];

	// подключился клиент - блокирующая 'receive'
	// получаем инф-цию из 'receive'
	int i = recv(daccsock, buf, MAXSTRLEN, 0);
	// из сокета клиента в буфер записываем инф-цию // 'receive' возвращает размер данных

	// на место последнего символа из буфера мы записываем символ конца строки - чтобы знать, где строка заканчивается
	buf[i] = '\0';

	// выводим сообщение клиента
	cout << buf << endl;

	// создаем буфер, который отправим пользователю
	const char* text = "Hello from server!";
	send(daccsock, text, strlen(text), 0);
	// 1) указываем сокет
	// 2) какая инф-ция 
	// 3) какая длина
	// 4) флаг - биты, которые хранят информацию о флаге
	// 0-все флаги - none

	// сервер отправил сообщение и может завершать работу // закрываем сокет клиента
	closesocket(daccsock);

	// закрываем сокет сервера
	closesocket(dsock);

	// освобождаем все остальные рес-сы
	WSACleanup();

	// выводим паузу сис-мы
	system("pause");
}